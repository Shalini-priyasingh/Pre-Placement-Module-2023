class Solution {
public:
    int firstBadVersion(int n) {
        //n is 1-based
        if(n == 1) return 1;
        //first -1 to avoid overflow
        int left = 1, right = n;
        int mid = left + (right-left)/2;
        //-1: meaningless, 0: false, 1: true
        unordered_map<int, bool> cache;
        // cout << n+1 << " space allocated." << endl;
        
        do{
            // cout << left << ", " << mid << ", " << right << endl;
            cache[mid] = isBadVersion(mid);
            if(cache[mid]){
                //search left part
                //7->4, 6->3
                right = mid-1;
            }else{
                //search right part
                left = mid+1;

            }
            mid = left + (right-left)/2;
            // if(mid == 1) break; //mid[1-1] is meaningless
        }while((left <= right) && !(cache.find(mid-1)!= cache.end() && cache.find(mid)!= cache.end() && !cache[mid-1] && cache[mid]));
        
        return mid;
    }
};